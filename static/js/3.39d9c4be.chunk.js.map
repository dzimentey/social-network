{"version":3,"sources":["components/Dialogs/dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","c","dialog","to","id","name","MessageItem","message","content","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","d","messagesElements","messagesData","m","isAuth","dialogs","dialogsItems","messages","AddMessageFormRedux","onSubmit","value","sendMessage","newMessageBody","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","type","withAuthRedirect","compose","connect","dispatch","sendMessageAC"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,0B,6FCQ/HC,EAAa,SAACC,GACvB,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,cAAC,IAAD,CAASC,GAAI,YAAcJ,EAAMK,GAAjC,SAAsCL,EAAMM,UCN3CC,EAAc,SAACP,GACxB,OACI,qBAAKC,UAAWC,IAAEM,QAAlB,SAA4BR,EAAMS,W,yCCa7BC,EAAU,SAACV,GAEpB,IAAIW,EAAQX,EAAMY,YAEZC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYV,KAAMU,EAAEV,KAAMD,GAAIW,EAAEX,QAE7EY,EAAmBN,EAAMO,aAAaH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAaV,QAASU,EAAEX,aAoB7E,OAAqB,IAAjBR,EAAMoB,OAAyB,cAAC,IAAD,CAAUhB,GAAI,WAG7C,sBAAKH,UAAWC,IAAEmB,QAAlB,UACI,qBAAKpB,UAAWC,IAAEoB,aAAlB,SAEKT,IAGL,sBAAKZ,UAAWC,IAAEqB,SAAlB,UAEI,8BAAMN,IAYN,cAACO,EAAD,CAAqBC,SA5BX,SAACC,GAEnB1B,EAAM2B,YAAYD,EAAME,0BAiC1BC,EAAcC,YAAiB,IAwB/BN,EAAsBO,YAAoC,CAC5DC,KAAM,wBADkBD,EAhB6C,SAAC/B,GACtE,OACI,uBAAMyB,SAAUzB,EAAMiC,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAU9B,KAAQ,iBAAkB+B,YAAa,sBACnEC,SAAY,CAACC,IAAeV,OAGhC,8BACI,wBAAQW,KAAM,SAAd,yB,wBCnEcC,YAAiB/B,GAEhCgC,sBACXC,aApBkB,SAAChC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACgC,GACtB,MAAO,CAIHjB,YAAa,SAACC,GACVgB,EAASC,YAAcjB,SAU/Ba,IAFWC,CAGbhC","file":"static/js/3.39d9c4be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__2uGXI\",\"dialogsItems\":\"dialogs_dialogsItems__3lLCa\",\"dialog\":\"dialogs_dialog__OSYVN\",\"active\":\"dialogs_active__rsQuI\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport c from './../dialogs.module.css'\r\n\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: string\r\n}\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={c.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import c from \"../dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessageType = {\r\n    content: string\r\n}\r\nexport const MessageItem = (props:MessageType) => {\r\n    return(\r\n        <div className={c.message}>{props.content}</div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport c from './dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MessageItem} from \"./Message/MessageItem\";\r\nimport {  dialogsPageType,} from \"../../Redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport  {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../coomon/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../Utilits/validators/validators\";\r\n\r\ntype DialogsPropsType = {\r\n    //dialogsData: Array<dialogsDataType>\r\n    //messagesData: Array<messagesDataType>\r\n    //newMessageBody: string\r\n    //dispatch: (action: ActionsTypes) => void\r\n    updateNewMessageBody: (newText: string) => void\r\n    sendMessage: (message?: string) => void\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    const dialogsElements = state.dialogsData.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n\r\n    const messagesElements = state.messagesData.map(m => <MessageItem content={m.message}/>)\r\n\r\n   // const newMessageBody = state.newMessageBody\r\n\r\n    // const onMessageClick = () => {\r\n    //     //props.dispatch(sendMessageAC())\r\n    //     props.sendMessage()\r\n    // }\r\n\r\n    // const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let newText = e.currentTarget.value\r\n    //     //props.dispatch(UpdateMessageBodyAC(newText))\r\n    //     props.updateNewMessageBody(newText)\r\n    // }\r\n\r\n    const addNewMessage = (value: AddMessageFormType) => {\r\n\r\n        props.sendMessage(value.newMessageBody);\r\n    }\r\n\r\n    if (props.isAuth === false) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogsItems}>\r\n\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={c.messages}>\r\n\r\n                <div>{messagesElements}</div>\r\n                {/*<form>*/}\r\n                {/*    <div>*/}\r\n                {/*        <textarea value={newMessageBody}*/}\r\n                {/*                  placeholder={'Type your text here'}*/}\r\n                {/*                  onChange={onNewMessageChange}>*/}\r\n                {/*        </textarea>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div>*/}\r\n                {/*        <button onClick={onMessageClick}>Add</button>*/}\r\n                {/*    </div>*/}\r\n                {/*</form>*/}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype AddMessageFormType = {\r\n\r\n    newMessageBody: string\r\n\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>>  = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name = {'newMessageBody'} placeholder={'Type your text here'}\r\n                validate = {[requiredField, maxLength50]}/>\r\n\r\n            </div>\r\n            <div>\r\n                <button type={\"submit\"}>Add</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType & any>({\r\n    form: 'dialogAddMessageForm' // unique name of using form\r\n}) (AddMessageForm)","import React from \"react\";\r\nimport {ActionsTypes, dialogsPageType, stateType, StoreType} from \"../../Redux/store\";\r\nimport {sendMessageAC} from \"../../Redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\r\n    return {\r\n        // updateNewMessageBody: (newText: string) => {\r\n        //     dispatch(UpdateMessageBodyAC(newText))\r\n        // },\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\nexport default compose<React.ComponentType>( // compose doesn't work without Type: <React.ComponentType>\r\n    connect(mapStateToProps, mapDispatchToProps),             // 1-st wrapper\r\n    withAuthRedirect                                          // 2-nd wrapper\r\n)(Dialogs);                                                   // Component\r\n\r\n\r\n"],"sourceRoot":""}