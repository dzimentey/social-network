{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileInfo","profile","src","photos","large","userPhoto","Preloader","Post","className","c","post","alt","message","likesAmount","MyPosts","React","memo","postsElements","postsData","map","p","ReduxPostForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","type","MyPostsContainer","connect","state","profilePage","dispatch","text","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorisedUseId","history","push","getUserProfile","getStatus","Component","compose","auth","id","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,qB,oICMZC,EAAyB,SAACC,GAA8B,IAAD,EAEhCC,oBAAS,GAFuB,mBAEzDC,EAFyD,KAE/CC,EAF+C,OAGpCF,mBAASD,EAAMI,QAHqB,mBAGzDA,EAHyD,KAGjDC,EAHiD,KAKhEC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACF,IAiBJ,OACI,gCACKA,EAEG,8BAAK,uBAAOK,SATD,SAACC,GACpBH,EAAUG,EAAEC,cAAcC,QAQoBC,OAd9B,WAChBR,GAAY,GACZH,EAAMY,aAAaR,IAYgDM,MAAON,EACtDS,WAAS,MAErB,8BAAK,sBAAMC,cAtBJ,WACfX,GAAY,IAqBC,SAAkCH,EAAMI,QAAU,oBAE3D,2BC7BCW,EAAc,SAACf,GACxB,OAAKA,EAAMgB,QAKP,8BAMI,gCACI,qBAAKC,IAAKjB,EAAMgB,QAAQE,OAAOC,MAAQnB,EAAMgB,QAAQE,OAAOC,MAAQC,MAEpE,cAAC,EAAD,CAAwBhB,OAAQJ,EAAMI,OAAQQ,aAAcZ,EAAMY,oBAbnE,cAACS,EAAA,EAAD,K,0BCPFC,EAAO,SAACtB,GACjB,OACI,sBAAKuB,UAAWC,IAAEC,KAAlB,UACI,qBAAKC,IAAK,SACLT,IAAK,6HACTjB,EAAM2B,QACP,yCACA,0CALJ,IAKyB3B,EAAM4B,gB,kCCM1BC,EAAUC,IAAMC,MAAM,SAAC/B,GAGhC,IAAMgC,EAAgBhC,EAAMiC,UAAUC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMR,QAASQ,EAAER,QAASC,YAAaO,EAAEP,iBAqBxF,OACI,2CAUI,cAACQ,EAAD,CAAeC,SAfL,SAACC,GACftC,EAAMuC,QAAQD,EAAOE,gBAgBhBR,QAOPS,EAAcC,YAAiB,IAiB/BN,EAAgBO,YAA6B,CAC/CC,KAAM,yBADYD,EAXwC,SAAC3C,GAC3D,OACI,uBAAMqC,SAAUrC,EAAM6C,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAM,cAAeC,YAAa,sBACvDC,SAAU,CAACC,IAAeX,KAEjC,wBAAQY,KAAM,SAAd,4B,QChDCC,EAAmBC,aAnBR,SAACC,GACrB,MAAO,CACHvB,UAAWuB,EAAMC,YAAYxB,cAKV,SAACyB,GACxB,MAAO,CAIHnB,QAAS,SAACoB,GAEND,EAASE,YAAUD,QAKCJ,CAA6C1B,GCRhEgC,EAAU,SAAC7D,GACpB,OACI,gCACI,cAAC,EAAD,CAAagB,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQQ,aAAcZ,EAAMY,eAC/E,cAAC0C,EAAD,Q,cCSNQ,E,uKAEF,WACI,IAAIC,EAASC,KAAKhE,MAAMiE,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKhE,MAAMmE,kBACPH,KAAKhE,MAAMoE,QAAQC,KAAK,UAGzCL,KAAKhE,MAAMsE,eAAeP,GAC1BC,KAAKhE,MAAMuE,UAAUR,K,oBAGzB,WAII,OACI,cAAC,EAAD,2BAAaC,KAAKhE,OAAlB,IAAyBgB,QAASgD,KAAKhE,MAAMgB,QAASZ,OAAQ4D,KAAKhE,MAAMI,OAAQQ,aAAcoD,KAAKhE,MAAMY,oB,GAlBvFkB,IAAM0C,WAoCtBC,sBACXlB,aAdoB,SAACC,GAAD,MAA0B,CAC9CxC,QAASwC,EAAMC,YAAYzC,QAC3BZ,OAAQoD,EAAMC,YAAYrD,OAC1B+D,gBAAiBX,EAAMkB,KAAKC,GAC5BC,OAAQpB,EAAMkB,KAAKE,UAUM,CAACN,mBAAgBC,cAAW3D,mBACrDiE,IAFWJ,CAIbX","file":"static/js/4.e1125f53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3W-rt\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)  //  current status synchronisation\r\n    }, [editMode])          // make synchronise when editMode has changed\r\n\r\n    const editModeOn = () => {\r\n        setEditMode(true) // set editMode to true\r\n\r\n    }\r\n\r\n    const editModeOff = () => {\r\n        setEditMode(false); // set editMode to false\r\n        props.updateStatus(status) // send new status to server\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ?\r\n                <div><input onChange={onStatusChange} onBlur={editModeOff} value={status}\r\n                            autoFocus/></div>\r\n                :\r\n                <div><span onDoubleClick={editModeOn}>{props.status || 'No status yet'}</span></div>\r\n            }\r\n            <br/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Preloader} from \"../../coomon/preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/homer-warrior.jpg\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img alt={'warriors'} width={'100%'} height={'350 px'}*/}\r\n            {/*         src={'https://petapixel.com/assets/uploads/2016/10/earnestbrooks.jpg'}/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div>\r\n                <img src={props.profile.photos.large ? props.profile.photos.large : userPhoto}/>\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport c from './Post.module.css'\r\ntype PostPropsType = {\r\n    message: string\r\n    likesAmount: string\r\n}\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={c.post}>\r\n            <img alt={'avatar'}\r\n                 src={'https://i0.wp.com/www.defensemedianetwork.com/wp-content/uploads/2012/09/Army-Gas-Mask-And-Protective-Clothing.jpg?ssl=1'}/>\r\n            {props.message}\r\n            <span>     </span>\r\n            <span>like: </span> {props.likesAmount}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport c from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {ActionsTypes, postsDataType} from \"../../../Redux/store\";\r\n\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../Utilits/validators/validators\";\r\nimport {Textarea} from \"../../coomon/FormsControls\";\r\n\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    postsData: Array<postsDataType>\r\n    addPost: (postText: string) => void\r\n    //updateInputText: (inputText: string) => void\r\n    //message: string\r\n    //dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nexport const MyPosts = React.memo( (props: MyPostsPropsType) => {\r\n\r\n\r\n    const postsElements = props.postsData.map(p => <Post message={p.message} likesAmount={p.likesAmount}/>)\r\n\r\n    // const addNewPost = () => {\r\n    //\r\n    //     let text = props.message\r\n    //     // text ? props.dispatch({type: 'ADD-POST', postText: text}) : alert('message is expected')\r\n    //     text ? props.addPost(text) : alert('message is expected')\r\n    //     //text ? props.dispatch(addPostAC(text)) : alert('message is expected')\r\n    // }\r\n\r\n    // const onChangeInputValue = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let inputText = e.currentTarget.value\r\n    //     props.updateInputText(inputText)\r\n    //     // props.dispatch({type: \"UPDATE-INPUT-TEXT\", inputText: e.currentTarget.value})\r\n    //     //props.dispatch(updateInputTextAC(e.currentTarget.value))\r\n    // }\r\n\r\n    const onAddPost = (values: newPostType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n\r\n            {/*<form>*/}\r\n            {/*    <textarea onChange={onChangeInputValue} value={props.message}/>*/}\r\n            {/*    /!*<textarea ref={newPostRef} onChange={onChangeInputValue} value={props.message}/>*!/*/}\r\n            {/*    <br/>*/}\r\n            {/*    <button onClick={addNewPost}>Add post</button>*/}\r\n            {/*</form>*/}\r\n\r\n            <ReduxPostForm onSubmit={onAddPost}/>\r\n\r\n            {postsElements}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\ntype newPostType = {\r\n    newPostText: string\r\n}\r\n\r\nconst addPostForm: React.FC<InjectedFormProps<newPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'newPostText'} placeholder={'Type your post here'}\r\n                   validate={[requiredField, maxLength10]}/>\r\n\r\n            <button type={'submit'}>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxPostForm = reduxForm<newPostType | any>({\r\n    form: 'ProfileAddNewPostForm' // unique name of using form\r\n}) (addPostForm)","import React, {ChangeEvent} from \"react\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {ActionsTypes, postsDataType, stateType, StoreType} from \"../../../Redux/store\";\r\nimport {addPostAC} from \"../../../Redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: stateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n       // message: state.profilePage.newPostDataMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\r\n    return {\r\n        // updateInputText: (inputText: string) => {\r\n        //     dispatch(updateInputTextAC(inputText))\r\n        // },\r\n        addPost: (text: string) => {\r\n\r\n            dispatch(addPostAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n// type MyPostsContainerPropsType = {\r\n//     //postsData: Array<postsDataType>\r\n//     //addPost: (postText: string) => void\r\n//     //updateInputText: (inputText: string) => void\r\n//     //message: string\r\n//     //dispatch: (action: ActionsTypes) => void\r\n//     store: StoreType\r\n// }\r\n//\r\n// export const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n//     let state: stateType = props.store.getState()\r\n//\r\n//     const addPost = (text: string) => {\r\n//\r\n//         //let text = state.profilePage.newPostDataMessage\r\n//         // text ? props.dispatch({type: 'ADD-POST', postText: text}) : alert('message is expected')\r\n//         //text ? props.addPost(text) : alert('message is expected')\r\n//         props.store.dispatch(addPostAC(text))\r\n//     }\r\n//\r\n//     const onChangeInputValue = (inputText: string) => {\r\n//         //let inputText = e.currentTarget.value\r\n//         //props.updateInputText(inputText)\r\n//         // props.dispatch({type: \"UPDATE-INPUT-TEXT\", inputText: e.currentTarget.value})\r\n//         props.store.dispatch(updateInputTextAC(inputText))\r\n//     }\r\n//\r\n//     return (\r\n//         <MyPosts postsData={state.profilePage.postsData} message={state.profilePage.newPostDataMessage}\r\n//                  updateInputText={onChangeInputValue}\r\n//                  addPost={addPost}\r\n//         />\r\n//     )\r\n// }","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionsTypes, postsDataType, StoreType} from \"../../Redux/store\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype ProfilePropsType = {\r\n    //postsData: Array<postsDataType>\r\n    // addPost: (postText: string) => void\r\n    //updateInputText: (inputText: string) => void\r\n    //message: string\r\n    //dispatch: (action: ActionsTypes) => void\r\n    //store: AppStateType//StoreType\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n\r\n            {/*<MyPosts postsData={props.postsData} message={props.message}*/}\r\n            {/*         dispatch={props.dispatch}*/}\r\n            {/*    addPost={props.addPost}*/}\r\n            {/*    updateInputText={props.updateInputText}*/}\r\n            {/*/>*/}\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport {Profile} from \"./Profile\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../Redux/profileReducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\n\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype ProfileContainerPropsType = {\r\n    // store: AppStateType//StoreType\r\n    //setUserProfile: (profile: any) => void\r\n    profile: any\r\n    getUserProfile: (userId: number) => void\r\n    isAuth: boolean\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    authorisedUseId: string | number\r\n}\r\n\r\ntype PathParamType = {\r\n    userId: string | any\r\n\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType, any> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorisedUseId;\r\n            if (!userId){this.props.history.push('/login')}\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        //if (this.props.isAuth === false) return <Redirect to={'/login'}/>\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUseId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\n\r\n// let AuthRedirectComponent: any = withAuthRedirect(ProfileContainer);\r\n//\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}), // 1-st wrapper\r\n    withRouter,                                                 // 2-nd wrapper\r\n    //withAuthRedirect                                            // 3-rd wrapper\r\n)(ProfileContainer);                                   // Component"],"sourceRoot":""}